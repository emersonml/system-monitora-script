generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id       String  @id @default(uuid()) @db.VarChar(36)
    name     String  @db.Text
    cpf      String? @db.VarChar(100)
    email    String? @unique @db.VarChar(100)
    phone    String? @db.VarChar(20)
    username String? @unique @db.VarChar(100)

    attachments Attachment[]
    roleId      String?      @db.VarChar(100)
    audits      Audit[]

    roles            Role[]   @relation("roles_users")
    firstLogin       Boolean?
    password         String?  @db.Text
    passwordRecovery String?  @db.Text

    company   Company? @relation(fields: [companyId], references: [id])
    companyId String?  @db.VarChar(36)

    @@map("users")
}

model Role {
    id    String @id @db.VarChar(100)
    name  String @db.Text
    level Int?

    users        User[]       @relation("roles_users")
    capabilities Capability[] @relation("capabilities_roles")

    @@map("roles")
}

model Cam {
    id   String  @id @default(uuid()) @db.VarChar(36)
    name String? @db.Text
    path String? @db.Text

    typeRecognition  String? @db.Text
    adminInformation String? @db.Text
    position         String? @db.Text

    company   Company? @relation(fields: [companyId], references: [id])
    companyId String?  @db.VarChar(36)

    @@map("cameras")
}

model Company {
    id   String @id @default(uuid()) @db.VarChar(36)
    cnpj String @unique

    name    String? @db.Text
    address String? @db.Text
    phone   String? @db.Text

    cameras Cam[]
    users   User[]

    @@map("companies")
}

model Capability {
    id    String @id @db.VarChar(100)
    roles Role[] @relation("capabilities_roles")

    @@map("capabilities")
}

model Settings {
    key   String @id @db.VarChar(100)
    value String @db.Text

    @@map("settings")
}

model Attachment {
    id       String  @id @default(uuid()) @db.VarChar(36)
    path     String  @db.VarChar(50)
    filename String  @db.Text
    typeName String? @db.Text

    user   User?   @relation(fields: [userId], references: [id])
    userId String? @db.VarChar(36)

    @@map("attachments")
}

model Audit {
    id          String          @id @default(uuid()) @db.VarChar(36)
    date        DateTime        @default(now())
    author      User            @relation(fields: [authorId], references: [id])
    authorId    String          @db.VarChar(36)
    action      AuditActionEnum
    description String          @db.Text
    modelId     String          @db.VarChar(36)
    modelName   AuditModelEnum
    ipAddress   String?         @db.Text

    @@map("audits")
}

enum AuditActionEnum {
    create
    view
    edit
    delete
    login
    logout
    custom
}

enum AuditModelEnum {
    session
    role
    capability
    attachment
    user
    employee
    vendor
    department
    departmentType
    project
    projectType
    task
    folder
    document
    expense
    expenseCategory
    revenue
    revenueCategory
    plan
    occurrence
    occurrenceMotivation
    occurrenceEnvironment
    instrument
    procedure
    procedureConclusion
    procedureType
    person
    nature
    natureGroup
    district
    city
    instaurationForm
    risp
    profession
    gender
    sexualOrientation
    ethnicity
    schooling
    civilState
}
